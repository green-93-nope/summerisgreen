#+TITLE: 算法技巧-使用动态规划解决地图路径类问题
#+DATE: 2017-07-27
#+SETUPFILE: ~/Hexo/setupfile.org
#+JEKYLL_LAYOUT: post
#+JEKYLL_CATEGORIES: 编程技巧
#+JEKYLL_TAGS: 编程技巧 算法
#+JEKYLL_PUBLISHED: true

* 栅格化的有向图类问题
对于图论的路径寻找问题，比较经典的解法就是Dijkstra 和 A*算法了。
这两种方法虽然通用，但编码实现比较复杂。
如果对这类问题中比较简单的一些问题也采用这种解法的话，就有点用大炮打蚊子的感觉了。

这里面的一类简单问题就是在栅格化了的有向图中进行搜索，因为其探索路径比较固定，一般为向右和向下，
所以可以直接使用动态规划来进行求解。

下面将结合leetcode题目来进行具体的讲解。
* Minimum Path Sum
#+BEGIN_EXAMPLE
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.
#+END_EXAMPLE

对于最短路径问题，假设我们有一个 m*n 的cost矩阵，这个矩阵中每个点表示的是从起始点到该点的最小路径的值。
矩阵中值的迭代过程可以使用下面的公式来表示：

cost(i,j) = min(cost(i-1,j), cost(i,j-1)) + grid[i][j]。

有了这个迭代公式，我们就可以使用动态规划方法来求解这个最短路径的问题了。

在编码之前，我们通过观察可以发现，在实际计算cost时，我们只需要当前行中的前一列中的元素和前一行中当前列的元素，
因此我们实际需要的只是两个n维向量而不是 m*n 的矩阵。
我们将这两个向量命名为 pre 和 cur，它们分别表示前一行和当前行向量。
利用这两个向量，我们将之前的迭代公式转化为：

cur(j) = min(cur(j-1),pre(j)) + grid[i][j]。

在编码求解该问题的过程中，一个比较麻烦的细节就是对边界问题的处理了。
可以使用的一个技巧就是给这两个向量的头部增加一个节点作为哨兵节点。
这里将 cur 的第一个节点设置为正无穷大，保证最左端的节点只会采用从前一行过来的路径。
而第一行需要特殊处理，因为他们都只存在从左边过来的路径，这里将 pre 的第一个元素设置为0，从而保证了元素值的正确性。
#+BEGIN_SRC python
  def minPathSum(self, grid):
      """
      :type grid: List[List[int]]
      :rtype: int
      """
      height, length = len(grid), len(grid[0])
      pre = [0] * (length+1)
      cur = [float("inf")] * (length+1)
      for i in range(length):
          pre[i+1] = pre[i] + grid[0][i]

      for i in range(1, height):
          for j in range(length):
              cur[j+1] = min(cur[j], pre[j+1]) + grid[i][j]
          pre = [i for i in cur]
      return pre[length]
#+END_SRC
* Unique Paths
#+BEGIN_EXAMPLE
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?
#+END_EXAMPLE

这个问题的基本迭代公式为 paths(i,j) = paths(i-1,j) + paths(i,j-1)，其解决思路和上一题的一致，只是初始化和边界条件的设置更加简单。
#+BEGIN_SRC python
  def uniquePaths(self, m, n):
      """
      :type m: int
      :type n: int
      :rtype: int
      """
      pre = [0] * (n+1)
      cur = [0] * (n+1)

      for j in range(n):
          pre[j+1] = 1

      for i in range(1,m):
          for j in range(n):
              cur[j+1] = cur[j] + pre[j+1]
          pre = [mem for mem in cur]
      return pre[n]
#+END_SRC
* Unique Paths II
#+BEGIN_EXAMPLE
Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.
#+END_EXAMPLE

如果路径中是存在障碍物的话，基本思路和之前的题目依旧相同，只是要在每个迭代中加一个将障碍物点上的路径值设为0的语句即可。
具体的解法如下面的Python代码所示。
#+BEGIN_SRC python
  def uniquePathsWithObstacles(self, obstacleGrid):
      """
      :type obstacleGrid: List[List[int]]
      :rtype: int
      """
      height, length = len(obstacleGrid), len(obstacleGrid[0])
      pre = [0] * (length +1)
      cur = [0] * (length +1)
      pre[0] = 1
      for i in range(length):
          if obstacleGrid[0][i] == 1:
              pre[i+1] = 0
          else:
              pre[i+1] = pre[i]

      for i in range(1, height):
          for j in range(length):
              if obstacleGrid[i][j] == 1:
                  cur[j+1] = 0
              else:
                  cur[j+1] = cur[j] + pre[j+1]

          pre = [i for i in cur]
      return pre[-1]
#+END_SRC
