#+TITLE: 算法技巧-寻找递增序列长度
#+DATE: 2020-09-11
#+SETUPFILE: ~/Hexo/setupfile.org
#+JEKYLL_LAYOUT: post
#+JEKYLL_CATEGORIES: 编程技巧
#+JEKYLL_TAGS: 编程技巧 算法
#+JEKYLL_PUBLISHED: true

* 最长上升子序列问题 
leetcode 300
#+begin_example
给定一个无序的整数数组，找到其中最长上升子序列的长度。
#+end_example

比较容易想到的解法是构造长度为n的数组，其第i位表示:第i个数字为最长子序列最后一位时的长度。
该解法即动态规划，其迭代式为: v[j] = max(v[j], v[i]+1), j > i >= 0。该算法的时间复杂度为O(n^2)。
#+begin_src python
def lengthOfLIS(nums: List[int]) -> int:
    size = len(nums)
    ans = [1] * size
    for i in range(size):
        cur_val = nums[i]
        for j in range(0, i):
            if cur_val > nums[j]:
                ans[i] = max(ans[i], ans[j] + 1)
    return 0 if len(ans) == 0 else max(ans)
#+end_src

对于结果队列，下标i表示长度为i的递增序列的最后一位，其数值为该位的最小值。
通过二分法可以在O(log^n)的时间复杂度内完成替换，总时间复杂度为O(nlog^n)
#+begin_src python
import bisect
def lengthOfLIS(nums: List[int]) -> int:
    size = len(nums)
    queue = []
    for i in range(size):
        cur_val = nums[i]
        index = bisect.bisect_left(queue, cur_val)
        if index == len(ans):
            queue.append(cur_val)
        else:
            queue[index] = cur_val
    return len(queue)
#+end_src

利用同样的思路可以解决二维的递增序列问题。

* 马戏团人塔问题
#+begin_example
有个马戏团正在设计叠罗汉的表演节目，一个人要站在另一人的肩膀上。
出于实际和美观的考虑，在上面的人要比下面的人矮一点且轻一点。
已知马戏团每个人的身高和体重，请编写代码计算叠罗汉最多能叠几个人。
#+end_example

将需要迭罗汉的人员按序排列(1.身高升序2.体重降序)后，值为体重，即转化为之前的最长递增子序列问题。
由于身高相同的人，不能迭罗汉，而只能选取一个，最矮的最优，所以要对其降序排列。
此时对于结果队列，下标i表示自上而下的i层人塔的最底层的体重最小值。
#+begin_src python
import bisect
def bestSeqAtIndex(height: List[int], weight: List[int]) -> int:
    ans, size = 0, len(height)
    sortedArr = sorted([(height[i], weight[i]) for i in range(size)], key = lambda pair: (pair[0], -pair[1]  ))
    queue = []
    for item in sortedArr:
        index = bisect.bisect_left(queue, item[1])
        if index == len(queue):
            queue.append(item[1])
        else:
            queue[index] = item[1]
    return len(queue)
#+end_src
